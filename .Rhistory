confusionMatrix(predTrain, movieRF_train$Success_1_to_1, positive = "1")
movieRF_model1 <- randomForest(Success_1_to_1 ~ ., data = movieRF_train, importance = TRUE, proximity=TRUE, do.trace = 100)
movie <- read.csv('/Users/kayinho/Documents/IIT/Sem2-2020Spring/CSP571/git_project/movie_forecasting/CSP571_Movie_Profits_Project/final_dataset.csv', header = TRUE, stringsAsFactors = FALSE)
movie$quarter <- ifelse(movie$quarter == "Q1",1, ifelse(movie$quarter =="Q2", 2, ifelse(movie$quarter =="Q3", 3, ifelse(movie$quarter == "Q4", 4,movie$quarter))))
movie$quarter <- as.numeric(movie$quarter)
movie$Success_1_to_1 <- as.factor(movie$Success_1_to_1)
splitVar <- 'Success_1_to_1'
movieRF <- movie[,c('actorRank', 'runtime','ProductionBudget', 'quarter', 'drama', 'thriller', 'nonfiction', 'action', 'amusement', 'Success_1_to_1')]
movieRF_inTrain <- createDataPartition(y = movieRF[,splitVar], list = FALSE, p = .8)
movieRF_train <- movieRF[movieRF_inTrain,]
movieRF_test <- movieRF[-movieRF_inTrain,]
movieRF_model1 <- randomForest(Success_1_to_1 ~ ., data = movieRF_train, importance = TRUE, proximity=TRUE, do.trace = 100)
#finetune the model parameter
#ntree: 500; mtry: 2 give the best accuracy: 0.8141
movieRF_model2 <- randomForest(Success_1_to_1 ~ ., data = movieRF_train, ntree = 500, mtry = 2, importance = TRUE, proximity=TRUE, do.trace = 100)
predTrain <- predict(movieRF_model2, movieRF_train, type = "class")
confusionMatrix(predTrain, movieRF_train$Success_1_to_1, positive = "1")
predTest <- predict(movieRF_model2, movieRF_test, type = "class")
confusionMatrix(predTest, movieRF_test$Success_1_to_1, positive = "1")
# Checking classification accuracy
mean(predTest == movieASCE_test$Success_1_to_1)
# Checking classification accuracy
mean(predTest == movieRF_test$Success_1_to_1)
# 0.6086957 (new subset)
table(predTest,movieRF_test$Success_1_to_1)
#F-score: 0.6886
precision(predTest, movieASCE_test$Success_1_to_1)
#F-score: 0.6886
precision(predTest, movieRF_test$Success_1_to_1)
recall(predTest, movieRF_test$Success_1_to_1)
F_meas(predTest, movieRF_test$Success_1_to_1)
require(pROC)
rf.roc<-roc(movieRF_train$Success_1_to_1,movieRF_model2$votes[,2])
plot(rf.roc)
importance(movieRF_model2)
varImpPlot(movieRF_model2)
#partial dependence plot
partialPlot(movieRF_model2, movieRF_test, actorRank, "1")
#partial dependence plot
partialPlot(movieRF_model2, movieRF_train, actorRank, "1")
partialPlot(movieRF_model2, movieRF_train, runtime, "1")
partialPlot(movieRF_model2, movieRF_train, ProductionBudget, "1")
partialPlot(movieRF_model2, movieRF_train, quarter, "1")
partialPlot(movieRF_model2, movieRF_train, drama, "1")
partialPlot(movieRF_model2, movieRF_train, thriller, "1")
partialPlot(movieRF_model2, movieRF_train, nonfiction, "1")
partialPlot(movieRF_model2, movieRF_train, action, "1")
partialPlot(movieRF_model2, movieRF_train, amusement, "1")
#partial dependence plot
partialPlot(movieRF_model2, movieRF_test, actorRank, "1")
partialPlot(movieRF_model2, movieRF_test, runtime, "1")
partialPlot(movieRF_model2, movieRF_test, ProductionBudget, "1")
partialPlot(movieRF_model2, movieRF_test, quarter, "1")
partialPlot(movieRF_model2, movieRF_test, drama, "1")
partialPlot(movieRF_model2, movieRF_test, thriller, "1")
partialPlot(movieRF_model2, movieRF_test, nonfiction, "1")
partialPlot(movieRF_model2, movieRF_test, action, "1")
partialPlot(movieRF_model2, movieRF_test, amusement, "1")
#multi-dimensional scaling plot of proximity matrix
MDSplot(movieRF_model2, movieRF_train$Success_1_to_1)
#multi-dimensional scaling plot of proximity matrix
MDSplot(movieRF_model2, movieRF_test$Success_1_to_1)
#read single tree
getTree(movieRF_model2, 1, labelVar = TRUE)
movie <- read.csv('/Users/kayinho/Documents/IIT/Sem2-2020Spring/CSP571/git_project/movie_forecasting/CSP571_Movie_Profits_Project/final_dataset.csv', header = TRUE, stringsAsFactors = FALSE)
set.seed(123)
library('caret')
movie$quarter <- ifelse(movie$quarter == "Q1",1, ifelse(movie$quarter =="Q2", 2, ifelse(movie$quarter =="Q3", 3, ifelse(movie$quarter == "Q4", 4,movie$quarter))))
movie$quarter <- as.numeric(movie$quarter)
movie$Success_1_to_1 <- as.factor(movie$Success_1_to_1)
splitVar <- 'Success_1_to_1'
library('corrplot')
cor(movie)
movieRF <- movie[,c('actorRank', 'runtime','ProductionBudget', 'quarter', 'drama', 'thriller', 'nonfiction', 'action', 'amusement', 'Success_1_to_1')]
movieRF_inTrain <- createDataPartition(y = movieRF[,splitVar], list = FALSE, p = .8)
movieRF_train <- movieRF[movieRF_inTrain,]
movieRF_test <- movieRF[-movieRF_inTrain,]
fit <- rpart(Success_1_to_1~., data = movieRF_train, method = 'class')
library(rpart)
install.packages('rpart.plot')
library(rpart.plot)
fit <- rpart(Success_1_to_1~., data = movieRF_train, method = 'class')
rpart.plot(tune_fit, extra = 106)
control <- rpart.control(minsplit = 2,
minbucket = round(5/ 3),
maxdepth = 5,
cp = 0)
tune_fit <- rpart(Success_1_to_1~., data = movieRF_train, method = 'class', control = control)
rpart.plot(tune_fit, extra = 106)
predTest1 <- predict(tune_fit, movieRF_test, type = "class")
table_mat1 <- table(movieRF_test$Success_1_to_1, predTest1)
table_mat1
accuracy_Test <- sum(diag(table_mat1)) / sum(table_mat1)
print(paste('Accuracy for test', accuracy_Test))
predTrain <- predict(tune_fit, movieRF_train, type = "class")
table_mat <- table(movieRF_train$Success_1_to_1, predTrain)
accuracy_Test <- sum(diag(table_mat)) / sum(table_mat)
print(paste('Accuracy for test', accuracy_Test))
table_mat
control <- rpart.control(minsplit = 2,
minbucket = round(5/ 3),
maxdepth = 5,
cp = 0.5)
tune_fit <- rpart(Success_1_to_1~., data = movieRF_train, method = 'class', control = control)
accuracy_tune(tune_fit)
accuracy_tune <- function(fit) {
predTest <- predict(fit, movieRF_test, type = 'class')
table_mat <- table(movieRF_test$Success_1_to_1, predTest)
accuracy_Test <- sum(diag(table_mat)) / sum(table_mat)
accuracy_Test
}
accuracy_tune(tune_fit)
?randomForest
movieRF_model1 <- randomForest(Success_1_to_1 ~ ., data = movieRF_train, importance = TRUE, do.trace = 100, nodesize = 5)
movieRF_model1
#finetune the model parameter
#ntree: 1000; mtry: 3 give the best accuracy: 0.7048458
movieRF_model2 <- randomForest(Success_1_to_1 ~ ., data = movieRF_train, ntree = 1000, mtry = 3, importance = TRUE, proximity=TRUE, do.trace = 100, nodesize = 5)
movieRF_model2
predTrain <- predict(movieRF_model2, movieRF_train, type = "class")
confusionMatrix(predTrain, movieRF_train$Success_1_to_1)
predTest <- predict(movieRF_model2, movieRF_test, type = "class")
confusionMatrix(predTest, movieRF_test$Success_1_to_1, positive = "1")
#finetune the model parameter
#ntree: 1000; mtry: 3 give the best accuracy: 0.7048458
movieRF_model2 <- randomForest(Success_1_to_1 ~ ., data = movieRF_train, ntree = 1000, mtry = 3, importance = TRUE, proximity=TRUE, do.trace = 100, maxnodes = 8)
predTrain <- predict(movieRF_model2, movieRF_train, type = "class")
confusionMatrix(predTrain, movieRF_train$Success_1_to_1)
predTest <- predict(movieRF_model2, movieRF_test, type = "class")
confusionMatrix(predTest, movieRF_test$Success_1_to_1, positive = "1")
#finetune the model parameter
#ntree: 1000; mtry: 3 give the best accuracy: 0.7048458
movieRF_model2 <- randomForest(Success_1_to_1 ~ ., data = movieRF_train, ntree = 1000, mtry = 3, importance = TRUE, proximity=TRUE, do.trace = 100, maxnodes = 16)
predTrain <- predict(movieRF_model2, movieRF_train, type = "class")
confusionMatrix(predTrain, movieRF_train$Success_1_to_1)
predTest <- predict(movieRF_model2, movieRF_test, type = "class")
confusionMatrix(predTest, movieRF_test$Success_1_to_1, positive = "1")
#finetune the model parameter
#ntree: 1000; mtry: 3 give the best accuracy: 0.7048458
movieRF_model2 <- randomForest(Success_1_to_1 ~ ., data = movieRF_train, ntree = 1000, mtry = 3, importance = TRUE, proximity=TRUE, do.trace = 100, maxnodes = 32)
predTrain <- predict(movieRF_model2, movieRF_train, type = "class")
confusionMatrix(predTrain, movieRF_train$Success_1_to_1)
predTest <- predict(movieRF_model2, movieRF_test, type = "class")
confusionMatrix(predTest, movieRF_test$Success_1_to_1, positive = "1")
#finetune the model parameter
#ntree: 1000; mtry: 3 give the best accuracy: 0.7048458
movieRF_model2 <- randomForest(Success_1_to_1 ~ ., data = movieRF_train, ntree = 1000, mtry = 3, importance = TRUE, proximity=TRUE, do.trace = 100, maxnodes = 4)
predTrain <- predict(movieRF_model2, movieRF_train, type = "class")
confusionMatrix(predTrain, movieRF_train$Success_1_to_1)
#finetune the model parameter
#ntree: 1000; mtry: 3 give the best accuracy: 0.7048458
movieRF_model2 <- randomForest(Success_1_to_1 ~ ., data = movieRF_train, ntree = 1000, mtry = 3, importance = TRUE, proximity=TRUE, do.trace = 100, maxnodes = 6)
predTrain <- predict(movieRF_model2, movieRF_train, type = "class")
confusionMatrix(predTrain, movieRF_train$Success_1_to_1)
#finetune the model parameter
#ntree: 1000; mtry: 3 give the best accuracy: 0.7048458
movieRF_model2 <- randomForest(Success_1_to_1 ~ ., data = movieRF_train, ntree = 1000, mtry = 3, importance = TRUE, proximity=TRUE, do.trace = 100, maxnodes = 8)
predTrain <- predict(movieRF_model2, movieRF_train, type = "class")
confusionMatrix(predTrain, movieRF_train$Success_1_to_1)
#finetune the model parameter
#ntree: 1000; mtry: 3 give the best accuracy: 0.7048458
movieRF_model2 <- randomForest(Success_1_to_1 ~ ., data = movieRF_train, ntree = 1000, mtry = 3, importance = TRUE, proximity=TRUE, do.trace = 100, maxnodes = 64)
predTrain <- predict(movieRF_model2, movieRF_train, type = "class")
confusionMatrix(predTrain, movieRF_train$Success_1_to_1)
predTest <- predict(movieRF_model2, movieRF_test, type = "class")
confusionMatrix(predTest, movieRF_test$Success_1_to_1, positive = "1")
install.packages("randomForest")
library(randomForest)
movie <- read.csv('/Users/kayinho/Documents/CSP571_Movie_Profits_Project/final_dataset.csv', header = TRUE, stringsAsFactors = FALSE)
movie <- read.csv('/Users/kayinho/Documents/IIT/Sem2-2020Spring/CSP571/git_project/movie_forecasting/CSP571_Movie_Profits_Project/final_dataset.csv', header = TRUE, stringsAsFactors = FALSE)
set.seed(123)
movie$quarter <- ifelse(movie$quarter == "Q1",1, ifelse(movie$quarter =="Q2", 2, ifelse(movie$quarter =="Q3", 3, ifelse(movie$quarter == "Q4", 4,movie$quarter))))
movie$quarter <- as.numeric(movie$quarter)
movieRF <- movie[,c('actorRank', 'runtime','ProductionBudget', 'quarter', 'drama', 'thriller', 'nonfiction', 'action', 'amusement', 'Success_1_to_1')]
movieRF_inTrain <- createDataPartition(y = movieRF[,splitVar], list = FALSE, p = .8)
movieRF_train <- movieRF[movieRF_inTrain,]
library('caret')
movieRF <- movie[,c('actorRank', 'runtime','ProductionBudget', 'quarter', 'drama', 'thriller', 'nonfiction', 'action', 'amusement', 'Success_1_to_1')]
movieRF_inTrain <- createDataPartition(y = movieRF[,splitVar], list = FALSE, p = .8)
movieRF_train <- movieRF[movieRF_inTrain,]
splitVar <- 'Success_1_to_1'
movieRF <- movie[,c('actorRank', 'runtime','ProductionBudget', 'quarter', 'drama', 'thriller', 'nonfiction', 'action', 'amusement', 'Success_1_to_1')]
movieRF_inTrain <- createDataPartition(y = movieRF[,splitVar], list = FALSE, p = .8)
movieRF_train <- movieRF[movieRF_inTrain,]
movieRF_test <- movieRF[-movieRF_inTrain,]
str(movieRF)
movie1 <- read.csv('/Users/kayinho/Documents/IIT/Sem2-2020Spring/CSP571/git_project/try.csv', header = TRUE, stringsAsFactors = FALSE)
movie1 <- movie1[which(movie1$runtime < 157),]
movie1 <- movie1[which(movie1$runtime > 58),]
movie1 <- movie1[which(movie1$ProductionBudget < 103000000),]
movie1 <- movie1[which(movie1$ProductionBudget > 7000),]
movie1$earning <- (movie1$DomesticGross-movie1$ProductionBudget)/movie1$ProductionBudget
movie1$Success_1_to_1 <- ifelse(movie1$earning > 0.5, 1, 0)
movie1$quarter <- ifelse(movie1$quarter == "Q1",1, ifelse(movie1$quarter =="Q2", 2, ifelse(movie1$quarter =="Q3", 3, ifelse(movie1$quarter == "Q4", 4,movie1$quarter))))
movie1$quarter <- as.numeric(movie1$quarter)
splitVar <- 'Success_1_to_1'
movieRF <- movie1[,c('actorRank','runtime','ProductionBudget', 'quarter',"drama","foreign", "romance","comedy", "horror",
"documentary", "action", "thriller","crime", "family", "scifi",
"music","mystery", "adventure", "animation", "history", "war",
"western","fantasy", "tv", 'Success_1_to_1')]
movieRF_inTrain <- createDataPartition(y = movieRF[,splitVar], list = FALSE, p = .8)
movieRF_train <- movieRF[movieRF_inTrain,]
movieRF_test <- movieRF[-movieRF_inTrain,]
movieRF_model1 <- randomForest(earning ~ ., data = movieRF_train, importance = TRUE, do.trace = 100, nodesize = 5)
head(movieRF)
movieRF <- movie1[,c('actorRank','runtime','ProductionBudget', 'quarter',"drama","foreign", "romance","comedy", "horror",
"documentary", "action", "thriller","crime", "family", "scifi",
"music","mystery", "adventure", "animation", "history", "war",
"western","fantasy", "tv", 'earning','Success_1_to_1')]
movieRF_inTrain <- createDataPartition(y = movieRF[,splitVar], list = FALSE, p = .8)
movieRF_train <- movieRF[movieRF_inTrain,]
movieRF_test <- movieRF[-movieRF_inTrain,]
movieRF_model1 <- randomForest(earning ~ ., data = movieRF_train, importance = TRUE, do.trace = 100, nodesize = 5)
movieRF_model1
#finetune the model parameter
#ntree: 1000; mtry: 3 give the best accuracy: 0.7048458
movieRF_model2 <- randomForest(earning ~ ., data = movieRF_train, ntree = 2000, mtry = 8, importance = TRUE, proximity=TRUE, do.trace = 100)
movieRF_model2
predTrain <- predict(movieRF_model2, movieRF_train, type = "class")
confusionMatrix(predTrain, movieRF_train$Success_1_to_1)
confusionMatrix(predTrain, movieRF_train$earning)
plot(movieRF_model2)
which.min(movieRF_model1$mse)
#11
# RMSE of this optimal random forest
sqrt(m1$mse[which.min(movieRF_model1$mse)])
#11
# RMSE of this optimal random forest
sqrt(movieRF_model1$mse[which.min(movieRF_model1$mse)])
plot(movieRF_model2)
which.min(movieRF_model2$mse)
#11
# RMSE of this optimal random forest
sqrt(movieRF_model2$mse[which.min(movieRF_model2$mse)])
library('rvest')
library('tidyr')
holidayWebpage <- read_html(url)
url = 'https://www.timeanddate.com/holidays/us/2000'
holidayWebpage <- read_html(url)
holidayTable <- html_nodes(holidayWebpage, css = 'table')
holiday <- html_table(holidayTable)[[1]]
holidayTable
length(holidayTable)
length(holiday)
holiday <- html_table(holidayTable, fill = TRUE)[[1]]
length(holiday)
nrow(holiday)
ncol(holiday)
holiday
str(holiday)
head(holiday)
holiday <- holiday[-(1:2),]
head(holiday)
url = 'https://www.timeanddate.com/holidays/us/'
for (page in c(2000:2017)){
urlList<-paste0(url,page)
holidayWebpage <- read_html(urlList)
holidayTable <- html_nodes(holidayWebpage, css = 'table')
holidayYearly <- html_table(holidayTable, fill = TRUE)[[1]]
holidayYearly['Year'] <- page
holidayAll<-rbind(holidayAll,holidayYearly)
}
url = 'https://www.timeanddate.com/holidays/us/'
holidayWebpage <- read_html(paste0(url,2000))
holidayTable <- html_nodes(holidayWebpage, css = 'table')
holidayYearly <- html_table(holidayTable, fill = TRUE)[[1]]
holidayYealy <- holidayYearly[-(1:2),]
holidayYearly['Year'] <- 2000
holidayAll <- holidayYealy
holidayAll
holidayWebpage <- read_html(paste0(url,2000))
holidayTable <- html_nodes(holidayWebpage, css = 'table')
holidayYearly <- html_table(holidayTable, fill = TRUE)[[1]]
holidayYearly <- as.data.frame(holidayYearly)
holidayYealy <- holidayYearly[-(1:2),]
holidayYearly['Year'] <- 2000
holidayAll <- holidayYealy
holidayAll
for (page in c(2001:2017)){
urlList<-paste0(url,page)
holidayWebpage <- read_html(urlList)
holidayTable <- html_nodes(holidayWebpage, css = 'table')
holidayYearly <- html_table(holidayTable, fill = TRUE)[[1]]
holidayYearly <- holidayYearly[-(1:2),]
holidayYearly['Year'] <- page
holidayAll<-rbind(holidayAll,holidayYearly)
}
url = 'https://www.timeanddate.com/holidays/us/'
holidayWebpage <- read_html(paste0(url,2000))
holidayTable <- html_nodes(holidayWebpage, css = 'table')
holidayYearly <- html_table(holidayTable, fill = TRUE)[[1]]
holidayYealy <- holidayYearly[-(1:2),]
holidayYearly[,'Year'] <- 2000
holidayAll <- holidayYealy
head(holidayALL)
head(holidayAll)
holidayYearly['Year',] <- 2000
head(holidayAll)
holidayAll <- holidayYealy
head(holidayAll)
holidayYearly$Year <- "2000"
holidayAll <- holidayYealy
head(holidayAll)
head(holidayAll$Date)
holidayYearly[,Year] <- "2000"
holidayYearly[,'Year'] <- "2000"
holidayYearly
url = 'https://www.timeanddate.com/holidays/us/'
holidayWebpage <- read_html(paste0(url,2000))
holidayTable <- html_nodes(holidayWebpage, css = 'table')
holidayYearly <- html_table(holidayTable, fill = TRUE)[[1]]
holidayYearly <- holidayYearly[-(1:2),]
holidayYearly[,'Year'] <- "2000"
holidayAll <- holidayYealy
head(holidayAll)
url = 'https://www.timeanddate.com/holidays/us/'
holidayWebpage <- read_html(paste0(url,2000))
holidayTable <- html_nodes(holidayWebpage, css = 'table')
holidayYearly <- html_table(holidayTable, fill = TRUE)[[1]]
holidayYearly <- holidayYearly[-(1:2),]
holidayYearly[,'Year'] <- "2000"
holidayAll <- holidayYearly
head(holidayAll)
url = 'https://www.timeanddate.com/holidays/us/'
holidayWebpage <- read_html(paste0(url,2000))
holidayTable <- html_nodes(holidayWebpage, css = 'table')
holidayYearly <- html_table(holidayTable, fill = TRUE)[[1]]
holidayYearly <- holidayYearly[-(1:2),]
holidayYearly[,'Year'] <- 2000
holidayAll <- holidayYearly
head(holidayAll)
for (page in c(2001:2017)){
urlList<-paste0(url,page)
holidayWebpage <- read_html(urlList)
holidayTable <- html_nodes(holidayWebpage, css = 'table')
holidayYearly <- html_table(holidayTable, fill = TRUE)[[1]]
holidayYearly <- holidayYearly[-(1:2),]
holidayYearly['Year'] <- page
holidayAll<-rbind(holidayAll,holidayYearly)
}
tail(holidayAll)
url = 'https://www.timeanddate.com/holidays/us/'
for (page in c(2000:2017)){
urlList<-paste0(url,page)
holidayWebpage <- read_html(urlList)
holidayTable <- html_nodes(holidayWebpage, css = 'table')
holidayYearly <- html_table(holidayTable, fill = TRUE)[[1]]
holidayYearly <- holidayYearly[-(1:2),]
holidayYearly['Year'] <- page
holidayAll<-rbind(holidayAll,holidayYearly)
}
cat('014')
cat(\014)
holiday_clean
library('rvest')
library('tidyr')
url = 'https://www.timeanddate.com/holidays/us/'
holidayAll <- data.frame()
for (page in c(2000:2017)){
urlList<-paste0(url,page)
holidayWebpage <- read_html(urlList)
holidayTable <- html_nodes(holidayWebpage, css = 'table')
holidayYearly <- html_table(holidayTable, fill = TRUE)[[1]]
holidayYearly <- holidayYearly[-(1:2),]
holidayYearly['Year'] <- page
holidayAll<-rbind(holidayAll,holidayYearly)
}
holiday_clean <- subset(holidayAll, (holidayAll$Type == "Federal Holiday" |
holidayAll$Name == "Christmas Eve" |
holidayAll$Name == "Christmas Eve observed" |
holidayAll$Name == "Mother's Day" |
holidayAll$Name == "Father's Day" |
holidayAll$Name == "Valentine's Day" |
holidayAll$Name == "Good Friday"))
names(holiday_clean) <- c('Date', 'DayOfWeek', 'HolidayName', 'Type', 'Details', 'Year')
holiday_clean <- holiday_clean[,c('Year', 'Date', 'DayOfWeek', 'HolidayName', 'Type')]
holiday_clean['FullDate'] <- paste(holiday_clean$Date, holiday_clean$Year, sep = " ")
holiday_clean
holiday_clean['FullDate'] <- sub(pattern = " ", replacement = "", holiday_clean['FullDate'])
head(holiday_clean)
holiday_clean <- subset(holidayAll, (holidayAll$Type == "Federal Holiday" |
holidayAll$Name == "Christmas Eve" |
holidayAll$Name == "Christmas Eve observed" |
holidayAll$Name == "Mother's Day" |
holidayAll$Name == "Father's Day" |
holidayAll$Name == "Valentine's Day" |
holidayAll$Name == "Good Friday"))
names(holiday_clean) <- c('Date', 'DayOfWeek', 'HolidayName', 'Type', 'Details', 'Year')
holiday_clean <- holiday_clean[,c('Year', 'Date', 'DayOfWeek', 'HolidayName', 'Type')]
holiday_clean['FullDate'] <- paste(holiday_clean$Date, holiday_clean$Year, sep = " ")
holiday_clean$FullDate <- sapply(holiday_clean$FullDate, FUN = sub, pattern = " ", replacement = "")
holiday_clean
holiday_clean$FullDate <- sapply(holiday_clean$FullDate, FUN = gsub, pattern = " ", replacement = "")
holiday_clean
holiday_clean['FullDate'] <- as.Date(holiday_clean['FullDate'], "%B%d%Y")
holiday_clean['FullDate'] <- tolower(holiday_clean['FullDate'])
holiday_clean['FullDate'] <- as.Date(holiday_clean['FullDate'], "%B%d%Y")
holiday_clean
holiday_clean <- subset(holidayAll, (holidayAll$Type == "Federal Holiday" |
holidayAll$Name == "Christmas Eve" |
holidayAll$Name == "Christmas Eve observed" |
holidayAll$Name == "Mother's Day" |
holidayAll$Name == "Father's Day" |
holidayAll$Name == "Valentine's Day" |
holidayAll$Name == "Good Friday"))
names(holiday_clean) <- c('Date', 'DayOfWeek', 'HolidayName', 'Type', 'Details', 'Year')
holiday_clean <- holiday_clean[,c('Year', 'Date', 'DayOfWeek', 'HolidayName', 'Type')]
holiday_clean['FullDate'] <- paste(holiday_clean$Date, holiday_clean$Year, sep = " ")
holiday_clean$FullDate <- sapply(holiday_clean$FullDate, FUN = gsub, pattern = " ", replacement = "")
holiday_clean
holiday_clean$FullDate <- as.Date(holiday_clean$FullDate, "%B%d%Y")
holiday_clean
holiday_clean <- subset(holidayAll, (holidayAll$Type == "Federal Holiday" |
holidayAll$Name == "Christmas Eve" |
holidayAll$Name == "Christmas Eve observed" |
holidayAll$Name == "Mother's Day" |
holidayAll$Name == "Father's Day" |
holidayAll$Name == "Valentine's Day" |
holidayAll$Name == "Good Friday"))
names(holiday_clean) <- c('Date', 'DayOfWeek', 'HolidayName', 'Type', 'Details', 'Year')
holiday_clean <- holiday_clean[,c('Year', 'Date', 'DayOfWeek', 'HolidayName', 'Type')]
holiday_clean$FullDate <- paste(holiday_clean$Date, holiday_clean$Year, sep = " ")
holiday_clean$FullDate <- tolower(holiday_clean$FullDate)
holiday_clean$FullDate <- sapply(holiday_clean$FullDate, FUN = gsub, pattern = " ", replacement = "")
holiday_clean$FullDate <- as.Date(holiday_clean$FullDate, "%B%d%Y")
holiday_clean
holiday_clean <- subset(holidayAll, (holidayAll$Type == "Federal Holiday" |
holidayAll$Name == "Christmas Eve" |
holidayAll$Name == "Christmas Eve observed" |
holidayAll$Name == "Mother's Day" |
holidayAll$Name == "Father's Day" |
holidayAll$Name == "Valentine's Day" |
holidayAll$Name == "Good Friday"))
names(holiday_clean) <- c('Date', 'DayOfWeek', 'HolidayName', 'Type', 'Details', 'Year')
holiday_clean <- holiday_clean[,c('Year', 'Date', 'DayOfWeek', 'HolidayName', 'Type')]
holiday_clean$FullDate <- paste(holiday_clean$Date, holiday_clean$Year, sep = " ")
holiday_clean$FullDate <- tolower(holiday_clean$FullDate)
holiday_clean$FullDate <- sapply(holiday_clean$FullDate, FUN = gsub, pattern = " ", replacement = "")
holiday_clean
holiday_clean$FullDate <- as.Date(holiday_clean$FullDate, "%b%d%Y")
holiday_clean
holiday_clean <- subset(holidayAll, (holidayAll$Type == "Federal Holiday" |
holidayAll$Name == "Christmas Eve" |
holidayAll$Name == "Christmas Eve observed" |
holidayAll$Name == "Mother's Day" |
holidayAll$Name == "Father's Day" |
holidayAll$Name == "Valentine's Day" |
holidayAll$Name == "Good Friday"))
names(holiday_clean) <- c('Date', 'DayOfWeek', 'HolidayName', 'Type', 'Details', 'Year')
holiday_clean <- holiday_clean[,c('Year', 'Date', 'DayOfWeek', 'HolidayName', 'Type')]
holiday_clean$FullDate <- paste(holiday_clean$Date, holiday_clean$Year, sep = " ")
holiday_clean$FullDate <- tolower(holiday_clean$FullDate)
holiday_clean$FullDate <- sapply(holiday_clean$FullDate, FUN = gsub, pattern = " ", replacement = "")
holiday_clean
holiday_clean$FullDate <- as.Date(holiday_clean$FullDate, "%b%d%Y")
holiday_clean
holiday_clean <- subset(holidayAll, (holidayAll$Type == "Federal Holiday" |
holidayAll$Name == "Christmas Eve" |
holidayAll$Name == "Christmas Eve observed" |
holidayAll$Name == "Mother's Day" |
holidayAll$Name == "Father's Day" |
holidayAll$Name == "Valentine's Day" |
holidayAll$Name == "Good Friday"))
names(holiday_clean) <- c('Date', 'DayOfWeek', 'HolidayName', 'Type', 'Details', 'Year')
holiday_clean <- holiday_clean[,c('Year', 'Date', 'DayOfWeek', 'HolidayName', 'Type')]
holiday_clean$FullDate <- paste(holiday_clean$Date, holiday_clean$Year, sep = " ")
holiday_clean$FullDate <- tolower(holiday_clean$FullDate)
holiday_clean$FullDate <- sapply(holiday_clean$FullDate, FUN = gsub, pattern = " ", replacement = "")
holiday_clean
holiday_clean <- subset(holidayAll, (holidayAll$Type == "Federal Holiday" |
holidayAll$Name == "Christmas Eve" |
holidayAll$Name == "Christmas Eve observed" |
holidayAll$Name == "Mother's Day" |
holidayAll$Name == "Father's Day" |
holidayAll$Name == "Valentine's Day" |
holidayAll$Name == "Good Friday"))
names(holiday_clean) <- c('Date', 'DayOfWeek', 'HolidayName', 'Type', 'Details', 'Year')
holiday_clean <- holiday_clean[,c('Year', 'Date', 'DayOfWeek', 'HolidayName', 'Type')]
holiday_clean$FullDate <- paste(holiday_clean$Date, holiday_clean$Year, sep = ", ")
#holiday_clean$FullDate <- tolower(holiday_clean$FullDate)
#holiday_clean$FullDate <- sapply(holiday_clean$FullDate, FUN = gsub, pattern = " ", replacement = "")
holiday_clean$FullDate <- as.Date(holiday_clean$FullDate, "%b %d, %Y")
holiday_clean
?duplicated
holiday_clean <- holiday_clean[unique(holiday_clean$FullDate),]
holiday_clean
holiday_clean <- subset(holidayAll, (holidayAll$Type == "Federal Holiday" |
holidayAll$Name == "Christmas Eve" |
holidayAll$Name == "Christmas Eve observed" |
holidayAll$Name == "Mother's Day" |
holidayAll$Name == "Father's Day" |
holidayAll$Name == "Valentine's Day" |
holidayAll$Name == "Good Friday"))
names(holiday_clean) <- c('Date', 'DayOfWeek', 'HolidayName', 'Type', 'Details', 'Year')
holiday_clean <- holiday_clean[,c('Year', 'Date', 'DayOfWeek', 'HolidayName', 'Type')]
holiday_clean$FullDate <- paste(holiday_clean$Date, holiday_clean$Year, sep = ", ")
holiday_clean$FullDate <- as.Date(holiday_clean$FullDate, "%b %d, %Y")
holiday_clean <- subset(holiday_clean, !(holiday_clean$HolidayName == "Christmas Eve" & holiday_clean$Type == "Observation, Christian"))
holiday_clean
holiday_clean <- subset(holiday_clean, !(holiday_clean$HolidayName == "Christmas Eve" & holiday_clean$Type == "Observance, Christian"))
holiday_clean
setwd('/Users/kayinho/Documents/IIT/Sem2-2020Spring/CSP571/git_project/movie_forecasting/CSP571_Movie_Profits_Project')
setwd('/Users/kayinho/Documents/IIT/Sem2-2020Spring/CSP571/git_project/movie_forecasting/CSP571_Movie_Profits_Project')
write.csv(holiday_clean, file = 'US_holidays_2000_2017.csv')
str(holiday_clean)
duplicated(holiday_clean$FullDate)
c <- holiday_clean[duplicated(holiday_clean$FullDate),]
c
holiday_clean <- subset(holiday_clean, !duplicated(holiday_clean$FullDate))
holiday_clean
setwd('/Users/kayinho/Documents/IIT/Sem2-2020Spring/CSP571/git_project/movie_forecasting/CSP571_Movie_Profits_Project')
write.csv(holiday_clean, file = 'US_holidays_2000_2017.csv')
